pipeline {
    agent any

    environment {
        VENV_DIR = 'venv'
        pipe_DataLake = 'teste_DataLake'   // variável da pasta
        repository = 'https://github.com/Sara-Mirian-Santos/Pipeline_Python.git'
        appRepoBranch = 'main'
        gitHubCredentialsId = 'credencial_adm'
        // urlWebhook = 'https://webhookb2'
        folderBucket = 'bucket'
        artifact = 'artefato'
        extension = 'zip'
    }

    stages {
        stage('CheckoutAppRepo') {
            steps {
                script {
                    checkout([
                        $class: 'GitSCM',
                        userRemoteConfigs: [[
                            url: "${env.repository}",
                            credentialsId: "${env.gitHubCredentialsId}"
                        ]],
                        branches: [[name: "${env.appRepoBranch}"]]
                    ])
                }
            }
        }

        stage('Instalar uv e dependências') {
            steps {
                script {
                    dir("${env.WORKSPACE}/${env.pipe_DataLake}") {
                        sh '''
                            pip install --upgrade pip
                            pip install uv
                            export PATH="$HOME/.local/bin:$PATH"
                            uv sync
                            uv pip install .
                        '''
                    }
                }
            }
        }

        stage('Ruff (lint e format)') {
            steps {
                script {
                    dir("${env.WORKSPACE}/${env.pipe_DataLake}") {
                        sh '''
                            ./venv/bin/uv run ruff check
                            ./venv/bin/uv run ruff format --check
                        '''
                    }
                }
            }
        }
        stage('Rodar testes') {
            steps {
                script {
                    dir("${env.WORKSPACE}/${env.pipe_DataLake}") {
                        sh './venv/bin/uv run pytest'
                    }
                }
            }
        }
        stage('Empacotar artefato (.zip)') {
            steps {
                script {
                    dir("${env.WORKSPACE}/${env.pipe_DataLake}") {
                        sh """
                            mkdir -p ${env.folderBucket}
                            python3 -m zipfile -c ${env.folderBucket}/${env.artifact}.${env.extension} \$(find . -name "*.py")
                            echo "Arquivo gerado em: ${env.folderBucket}/${env.artifact}.${env.extension}"
                        """
                    }
                }
            }
        }
        stage('Upload artefato para MinIO') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'minio-creds', usernameVariable: 'MINIO_USER', passwordVariable: 'MINIO_PASS')]) {
                    script {
                        dir("${env.WORKSPACE}/${env.pipe_DataLake}") {
                            sh """
                                mc alias set local http://localhost:9000 $MINIO_USER $MINIO_PASS
                                mc cp ${env.folderBucket}/${env.artifact}.${env.extension} local/dags-dev/
                                echo "Artefato enviado para MinIO: dags-dev/${env.artifact}.${env.extension}"
                            """
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs() // Limpa o workspace após a execução
        }
        failure {
            script {
                // office365ConnectorSend message: "Teste falhou ❌", webhookUrl: env.urlWebhook   
                echo "Erro na execução da esteira de teste."
            }
        }
        success {
            script {                
                // office365ConnectorSend message: "Teste finalizado com sucesso ✅", webhookUrl: env.urlWebhook
                echo "Esteira de teste executada com sucesso!"      
            }
        }
        aborted {
            // office365ConnectorSend message: "Teste abortado ⚠️", webhookUrl: env.urlWebhook
            updateGitlabCommitStatus name: 'CommitAndPushReportToGit', state: 'canceled'
        }
    }
}



